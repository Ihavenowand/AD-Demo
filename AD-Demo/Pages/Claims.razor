@page "/claims"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
<h3>Claims</h3>

<AuthorizeView>
    <Authorized>
        <h2 class="mb-4">Hello, @context.User.Identity.Name!</h2>

        <table class="table">
            <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var claim in context.User.Claims)
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
            </tbody>
        </table>
        
        @*Role check option 1*@
        @*Use the http contenct and the IsInRole*@
        @if(context.User.IsInRole("administrator"))
        {
            <p>Administrator</p>
        }
        else
        {
            <p>Not Administrator</p>
        }
        
        
        <AuthorizeView Policy="TestApplication" Context="context1">
            <Authorized>
                <p> This is visible because of the TestApplication Group Membership</p>
            </Authorized>
            <NotAuthorized>
                <p>User is not in the TestApplication Group</p>
            </NotAuthorized>
        </AuthorizeView>
        
        
        <AuthorizeView Policy="DatabaseAccess" Context="context2">
            <Authorized>
                <p> This is visible because of the DatabaseAccess group membership</p>
            </Authorized>
            <NotAuthorized>
                <p>User is not in the DatabaseAccess Group</p>
            </NotAuthorized>
        </AuthorizeView>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]  private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal AuthenticationStateUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        AuthenticationState authenticationState;
        

        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;
    }
}